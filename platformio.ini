#
# PlatformIO Configuration File
#
# For detailed documentation with EXAMPLES:
#
# https://docs.platformio.org/en/latest/projectconf/index.html
#
#
# By default platformio build will abort after 5 errors.
# Remove '-fmax-errors=5' from build_flags below to see all.
#
[platformio]
src_dir         = .
;for Demo
;build_dir       = Demo_Build
;for BlinkingLight
build_dir       = BlinkingLight_Build
default_envs    = disco_f100rb

[common]
; Scratch pad (this is just my space for extra stuff, ignore it)
;default_src_filter  = +<*> -<Library/ST7735.c> -<Library/ff9/src/option/cc932.c> -<Library/ff9/src/option/cc936.c> -<Library/ff9/src/option/cc949.c>-<Library/ff9/src/option/cc950.c> -<Library/ff9/src/option/ccsbcs.c> -<Library/spi.c> -<Library/uartfc.c>
;-<"../../.platformio">
; end of Scratch pad
;
; two files (located outside this repository but loaded by Platformio due to framework definition) are always compiled
; with the ones located inside this repository:
; file 1 (the Startup code, but we want to use our own Startup code file called "startup_stm32f10x.c"):
; startup_stm32f100xb.s --assembler code, located at: for windows: "c:\users\joann\.platformio\packages\framework-cmsis-stm32f1\Source\Templates\gcc"
; startup_stm32f100xb.s --assembler code, located at: for linux: "/home/joann/.platformio/packages/framework-cmsis-stm32f1/Source/Templates/gcc"
; file 2:
; system_stm32f1xx.c -- c code, located at: for windows: "c:\users\joann\.platformio\packages\framework-cmsis-stm32f1\Source\Templates"
; system_stm32f1xx.c -- c code, located at: for linux: "/home/joann/.platformio/packages/framework-cmsis-stm32f1/Source/Templates"
;
;for Demo:
; for Linux:
;default_src_filter  = +<*> -<BlinkingLight> -<Library> -<home> -<C> -<.platformio> -<../.platformio/packages/framework-cmsis-stm32f1/Source/Templates/gcc/startup_stm32f100xb.s>
; for Windows:
;default_src_filter  = +<*> -<BlinkingLight> -<Library> -<home> -<C> -<.platformio> -<.platformio> -<..\..\..\users\joann\.platformio\packages\framework-cmsis-stm32f1\Source\Templates\gcc\startup_stm32f100xb.s>
;
;for BlingingLight:
; for Linux
;default_src_filter  = +<*> -<Demo> -<Library> -<home> -<C> -<.platformio> -<../.platformio/packages/framework-cmsis-stm32f1/Source/Templates/gcc/startup_stm32f100xb.s>
; for Windows:
default_src_filter  = +<*> -<Demo> -<Library> -<home> -<C> -<.platformio> -<..\..\..\users\joann\.platformio\packages\framework-cmsis-stm32f1\Source\Templates\gcc\startup_stm32f100xb.s>
;
; For Both Linux and Windows 10:
; FOR THE "build_flags=" ONLY enable the set of -I (include paths for the OS you are on)
;   for WINDOW only enable (un-comment) the ones listed for WINDOWs and disable (comment out) the one listed for Linux
;   for LINUX only enable (un-comment) the ones listed for Linux and disable (comment out) the ones listed for Windows
build_flags =
    -O1
    -g
    ; the next statement are automatically added by Platformio via "../.platformio/platforms/ststm32/boards/disco_f100rb.json" file
    ;;-mcpu=cortex-m3 -mthumb
    ;
    ;;-I"."   -- might not be needed
    ;;;-I".."  -- might not be needed
    ;
    ;for Linux:
    ; for stm32f10x.h file:
    ;-I"/home/joann/Arm/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x"
    ; for core_cm3.c and core_cm3.h:
    ;-I"/home/joann/Arm/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupport"
    ; for other modules that might need to be accessed later:
    ;-I"/home/joann/Arm/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc"
    ;
    ;for Windows 10:
    ; for stm32f10x.h file:
    -I"C:\Users\joann\download_sw\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x"
    ; for core_cm3.c and core_cm3.h:
    -I"C:\Users\joann\download_sw\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport"
    ; for other modules that might need to be accessed later:
    ;-I"C:\Users\joann\download_sw\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\inc"
    ;
    ; for BOTH Linux and Windows 10:
    -DSTM32F10X_MD_VL
    -DUSE_STDPERIPH_DRIVER
    -DUSE_FULL_ASSERT
    ;
    ;for Linux:
    ; for other modules that might need to be accessed later:
    ;-I"./Library/ff9/src"
    ; for other modules that might need to be accessed later:
    ;-I"./Library"
    ;
    ;for Windows 10:
    ; for other modules that might need to be accessed later:
    ;-I".\Library\ff9\src"
    ; for other modules that might need to be accessed later:
    ;-I".\Library"
    ;
    ; for BOTH Linux and Windows 10:
    -fmax-errors=5

[env:disco_f100rb]
platform                = ststm32
board                   = disco_f100rb
framework               = cmsis
;This projects link script file (.ld)
board_build.ldscript    = "STM32F100RBHX_FLASH_MOD.ld"
;
;default link scripts (.ld) for this board are located here (these are just comments only, use board_build.ldscript above):
; for Linux:
;board_build.ldscript = "/home/joann/.platformio/packages/framework-cmsis-stm32f1/Source/Templates/gcc/linker/STM32F100XB_FLASH.ld"
;board_build.ldscript = "/home/joann/.platformio/packages/tool-ldscripts-ststm32/stm32f1/STM32F100RBHX_FLASH.ld"
; for Windows 10:
;board_build.ldscript = "c:\users\joann\.platformio\packages\framework-cmsis-stm32f1\Source\Templates\gcc\linker\STM32F100XB_FLASH.ld"
;board_build.ldscript = "c:\users\joann\.platformio\packages\tool-ldscripts-ststm32\stm32f1\STM32F100RBHX_FLASH.ld"

src_filter              = ${common.default_src_filter}
build_flags             = ${common.build_flags}

upload_protocol         = custom
;ENABLE ONLY ONE upload_protocol
;for linux:
;upload_command          = st-flash write $SOURCE 0x08000000
;
;For Windows using ST-LINK_cli from STelectronics:
;upload_command          = st-link_cli -c ID=0 SWD -P $SOURCE 0x08000000
;
;For Windows using stlink V1.6.0:
upload_command          = st-flash write $SOURCE 0x08000000
