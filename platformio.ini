#
# PlatformIO Configuration File
#
# For detailed documentation with EXAMPLES:
#
# https://docs.platformio.org/en/latest/projectconf/index.html
#
#
# By default platformio build will abort after 5 errors.
# Remove '-fmax-errors=5' from build_flags below to see all.
#
[platformio]
src_dir         = .
libdeps_dir     = .pio
;
;default_envs    = disco_f100rb
;default_envs    = disco_f407vg
; for Original-disco_f407vg enviroment ONLY compile Demo proj 
default_envs    = Original-disco_f407vg
;
;for Demo
build_dir       = Demo_Build
;for BlinkingLight
;build_dir       = BlinkingLight_Build
;for Blinking_Light2
;build_dir       = Blinking_Light2_Build
;for Blinking_Light3
;build_dir       = Blinking_Light3_Build
;for Button_Light
;build_dir       = Button_Light_Build
#
#
#
#  Common stuff
#
[common]
default_src_filter  =
    +<*>
    -<Docs>
    -<include>
    -<F4-Backup-bootloader-and-firmware>
;
; For Both Linux and Windows 10:
build_flags =
    -fmax-errors=5
    ;when not debugging
    ;-O1
    ;when debugging
    ;https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html for gcc options
    -O0 -g3 -ggdb3
    ; for BOTH Linux and Windows 10:
    -DUSE_STDPERIPH_DRIVER
    -DUSE_FULL_ASSERT
    -I"."
#
#
# Discovery board: STM32VLDISCOERY
#
[env:disco_f100rb]
platform                = ststm32
board                   = disco_f100rb
framework               = cmsis
board_build.mcu         = stm32f100rbt6
board_build.f_cpu       = 24000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F100RBT6
board_build.ldscript    = "STM32F100RBHX_FLASH_MOD.ld"
;f100rb ia a medium-density value line for f100xx MCU use to run code
build_flags             = ${common.build_flags} -DSTM32F100xB -DSTM32F10X_MD_VL -DSTM32_F100RB
                            -I".pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x"
                            -I".pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/inc"
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
src_filter              = ${common.default_src_filter}
                            +<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/Documentation>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/_htmresc>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src>
                            ;
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/CoreSupport>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c>
                            -<Library>
                            +<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
lib_deps                = STM32F10x_StdPeriph_Lib_V3.5.0_mod = https://github.com/GadgetAngel/STM32F10x_StdPeriph_Lib_V3.5.0_mod.git
lib_ignore              = STM32F10x_StdPeriph_Lib_V3.5.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;For Windows and Linux using stlink V1.6.0:
;upload_command          = st-flash write $SOURCE 0x08000000

;Debug setup
debug_tool              = stlink
;for Demo
;debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
debug_port              = localhost:3333
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  $INIT_BREAK
  monitor reset halt
  $LOAD_CMDS
  monitor init
  monitor reset halt
  interrupt
  continue
#
#
#  Discovery board: STM32F4DISCOVERY
#
[env:disco_f407vg]
platform                = ststm32
board                   = disco_f407vg
framework               = cmsis
board_build.mcu         = stm32f407vgt6
board_build.f_cpu       = 168000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F407VGT6
board_build.ldscript    = "STM32F407VGTX_FLASH.ld"
;
build_flags             = ${common.build_flags} -DSTM32F4 -DSTM32F407xx -DSTM32_F407VG
                            ;-std=gnu++14
                            ;-DUSBCON -DUSBD_USE_CDC
                            ;-DTIM_IRQ_PRIO=13
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/include"
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/inc"
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
;build_unflags           = -std=gnu++11
src_filter              = ${common.default_src_filter}
                            +<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TASKING>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/_htmresc>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc_ride7>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/SW4STM32>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driverr/src/stm32f4xx_rcc.c>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c>
                            -<Library>
                            -<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
lib_deps                = STM32F4xx_StdPeriph_Lib_V1.8.0_mod = https://github.com/GadgetAngel/STM32F4xx_StdPeriph_Lib_V1.8.0_mod.git
lib_ignore              = STM32F4xx_StdPeriph_Lib_V1.8.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;For Windows and Linux using stlink V1.6.0:
upload_command          = st-flash write $SOURCE 0x08008000

;Debug setup
debug_tool              = stlink
;for Demo
debug_init_break        = break inc if i > 100
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:144 if button_value = 1
debug_port              = localhost:3333
debug_load_mode         = always
debug_load_cmds         = preload
;debug_load_cmds         = load
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  $INIT_BREAK
  monitor reset halt
  $LOAD_CMDS
  monitor init
  monitor reset halt
  interrupt
  continue

#
#
#  Discovery board (orginal firmware reload): STM32F4DISCOVERY
#
[env:Original-disco_f407vg]
platform                = ststm32
board                   = disco_f407vg
framework               = cmsis
board_build.mcu         = stm32f407vgt6
board_build.f_cpu       = 168000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F407VGT6
board_build.ldscript    = "STM32F407VGTX_FLASH.ld"
;
build_flags             = ${common.build_flags} -DSTM32F4 -DSTM32F407xx -DSTM32_F407VG
                            ;-std=gnu++14
                            ;-DUSBCON -DUSBD_USE_CDC
                            ;-DTIM_IRQ_PRIO=13
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/include"
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/inc"
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
;build_unflags           = -std=gnu++11
src_filter              = ${common.default_src_filter}
                            +<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TASKING>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/_htmresc>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc_ride7>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/SW4STM32>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driverr/src/stm32f4xx_rcc.c>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c>
                            -<Library>
                            +<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
lib_deps                = STM32F4xx_StdPeriph_Lib_V1.8.0_mod = https://github.com/GadgetAngel/STM32F4xx_StdPeriph_Lib_V1.8.0_mod.git
lib_ignore              = STM32F4xx_StdPeriph_Lib_V1.8.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;For Windows and Linux using stlink V1.6.0:
upload_command          = st-flash --format ihex write C:/Firmware/Git_Repo/STM32_Template/F4-Backup-bootloader-and-firmware/bootloader-and-firmware.hex

;Debug setup
debug_tool              = stlink
;for Demo
debug_init_break        = break inc if i > 100
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:144 if button_value = 1
debug_port              = localhost:3333
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  $INIT_BREAK
  monitor reset halt
  $LOAD_CMDS
  monitor init
  monitor reset halt
  interrupt
  continue
