#
# PlatformIO Configuration File
#
# For detailed documentation with EXAMPLES:
#
# https://docs.platformio.org/en/latest/projectconf/index.html
#
#
# By default platformio build will abort after 5 errors.
# Remove '-fmax-errors=5' from build_flags below to see all.
#
[platformio]
src_dir         = .
libdeps_dir     = .pio
;
;
default_envs    = disco_f100rb
;default_envs    = disco_f407vg
;for Original-disco_f407vg enviroment ONLY compile Demo proj
;default_envs    = Original-disco_f407vg
;default_envs     = nucleo_l433rc_p
;default_envs     = nucleo_f767zi
;
;for BOTH disco_f100rb and disco_f407vg environments
;for Demo
;build_dir       = Demo_Build
;for BlinkingLight
;build_dir       = BlinkingLight_Build
;for Blinking_Light2
;build_dir       = Blinking_Light2_Build
;for Blinking_Light3
;build_dir       = Blinking_Light3_Build
;for Button_Light
;build_dir       = Button_Light_Build
; end of for BOTH disco_f100rb and disco_f407vg environments
;
; ONLY for disco_f407vg environment --the program name is GPIO_IOToggle
;build_dir        = GPIO_IOToggle_Build
;
; ONLY for disco_f100rb environment --the program name is GPIOToggle
build_dir         = f100rb_GPIOToggle_Build
;
#
#
#
#  Common stuff
#
[common]
default_src_filter  =
    +<*>
    -<Docs>
    -<include>
    -<F4-Backup-firmware-files>
    -<F1-Backup-firmware-files>
    -<L4-Backup-firmware-files>
;
; For Both Linux and Windows 10:
build_flags =
    -fmax-errors=5
    ;when not debugging
    ;-O1
    ;when debugging
    ;https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html for gcc options
    -O0 -g3 -ggdb3 -falign-functions=4
    ; for BOTH Linux and Windows 10:
    -DUSE_STDPERIPH_DRIVER
    -DUSE_FULL_ASSERT
#
#
# Discovery board: STM32VLDISCOERY
#
[env:disco_f100rb]
platform                = ststm32
board                   = disco_f100rb
framework               = cmsis
board_build.mcu         = stm32f100rbt6
board_build.f_cpu       = 24000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F100RBT6 has 128Kbytes FLASH or 131072 or 0x20000,
;
board_build.ldscript    = "STM32F100RBHX_FLASH_MOD.ld"
;f100rb ia a medium-density value line for f100xx MCU use to run code
                            ; beginning of not used section
;build_unflags           = -mcpu=cortex-m3
                            ; end of not used section
build_flags             = ${common.build_flags} -DSTM32F100xB -DSTM32F10X_MD_VL -DSTM32_F100RB
                            ; beginning of not used section
                            ;-mcpu=cortex-m4
                            ; end of not used section
                            -I".pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x"
                            -I".pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/inc"
                            -I"."
                            ; beginning of not used section
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
                            ; end of not used section
src_filter              = ${common.default_src_filter}
                            ; then next 5 lines can be ignored
                            ;for Linux
                            ;-<../../.platformio/packages/framework-cmsis-stm32f1/Source/Templates/gcc/startup_stm32f100xb.s>
                            ;for Windows
                            ;-<..\..\.platformio\packages\framework-cmsis-stm32f1\Source\Templates>
                            ;+<..\..\.platformio\packages\framework-cmsis-stm32f1\Source\Templates\system_stm32f1xx.c>
                            ;
                            ;for Both Linux and Windows
                            +<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/Documentation>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/_htmresc>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle/stm32f10x_it.c>
                            ;
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/CMSIS/CM3/CoreSupport>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/misc.c>
                            -<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c>
                            +<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c>
                            +<.pio/disco_f100rb/STM32F10x_StdPeriph_Lib_V3.5.0_mod/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c>
                            -<Library>
                            ;
                            -<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
                            ;This is GPIO_IOToggle
                            -<GPIO_IOToggle>
                            ;This is GPIOToggle
                            +<STM32VLDiscovery-board-original-SW/GPIOToggle>
lib_deps                = STM32F10x_StdPeriph_Lib_V3.5.0_mod = https://github.com/GadgetAngel/STM32F10x_StdPeriph_Lib_V3.5.0_mod.git
lib_ignore              = STM32F10x_StdPeriph_Lib_V3.5.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;for Windows using ST-LINK_cli:
upload_command          = st-link_cli -c ID=0 SWD -P $SOURCE 0x08000000
;For Linux using stlink V1.6.0:
;upload_command          = st-flash write $SOURCE 0x08000000

;Debug setup

;For Linux:
;debug_tool              = stlink
;use the default debug_server

;For Windows ONLY:
debug_tool              = custom
debug_port              = localhost:62230
;openocd -f interface/stlink-v2-1.cfg -c "reset_config none" -f target/stm32f1x.cfg
debug_server =
  C:\ST\STM32CubeIDE_1.5.1\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_1.5.0.202011040924\tools\bin\ST-LINK_gdbserver.bat

;for Demo
;debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
;for GPIOToggle
debug_init_break        = break main.c:74 if counter32 > 40
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  monitor reset
  $LOAD_CMDS
  $INIT_BREAK
#
#
#  Discovery board: STM32F4DISCOVERY
#
[env:disco_f407vg]
platform                = ststm32
board                   = disco_f407vg
framework               = cmsis
board_build.mcu         = stm32f407vgt6
board_build.f_cpu       = 168000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F407VGT6, 1024KiB of FLASH or 1048576 or 0x100000; bootloader: 0x08000000 - 0x08007FFF; firmware: 0x08008000 - 0x08100000
board_build.ldscript    = "STM32F407VGTX_FLASH.ld"
;
build_flags             = ${common.build_flags} -DSTM32F4 -DSTM32F407xx -DSTM32_F407VG
                            ; beginning not used section
                            ;-mcpu=cortex-m4 -mthumb
                            ;-std=gnu++14
                            ;-DUSBCON -DUSBD_USE_CDC
                            ;-DTIM_IRQ_PRIO=13
                            ; end of not used section
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/include"
                            -I".pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/inc"
                            -I"."
                            ;
                            -I"GPIO_IOToggle"
                            ;
                            ; beginning of not used section
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
;build_unflags           = -std=gnu++11
                            ; end of not used section
src_filter              = ${common.default_src_filter}
                            +<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TASKING>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/_htmresc>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc_ride7>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/SW4STM32>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            +<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c>
                            +<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c>
                            -<.pio/disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c>
                            -<Library>
                            -<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
                            +<GPIO_IOToggle>
lib_deps                = STM32F4xx_StdPeriph_Lib_V1.8.0_mod = https://github.com/GadgetAngel/STM32F4xx_StdPeriph_Lib_V1.8.0_mod.git
lib_ignore              = STM32F4xx_StdPeriph_Lib_V1.8.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;for Windows using ST-LINK_cli:
upload_command          = st-link_cli -c ID=0 SWD -P $SOURCE 0x08000000
;For Linux using stlink V1.6.0:
;upload_command          = st-flash write $SOURCE 0x08000000

;Debug setup
;For Linux:
;debug_tool              = stlink
;use the default debug_server

;For Windows ONLY:
debug_tool              = custom
debug_port              = localhost:62230
;openocd -f interface/stlink-v2.cfg -c "reset_config none" -f target/stm32f4x.cfg
debug_server =
  C:\ST\STM32CubeIDE_1.5.1\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_1.5.0.202011040924\tools\bin\ST-LINK_gdbserver.bat

;for Demo
;debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
;for GPIO_IOToggle
debug_init_break        = break main.c:166
;
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  monitor reset
  $LOAD_CMDS
  $INIT_BREAK

#
#
#  Discovery board (orginal firmware reload): STM32F4DISCOVERY
#
[env:Original-disco_f407vg]
platform                = ststm32
board                   = disco_f407vg
framework               = cmsis
board_build.mcu         = stm32f407vgt6
board_build.f_cpu       = 168000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F407VGT6
board_build.ldscript    = "STM32F407VGTX_FLASH.ld"
;
build_flags             = ${common.build_flags} -DSTM32F4 -DSTM32F407xx -DSTM32_F407VG
                            ; beginning of not used section
                            ;-mcpu=cortex-m4 -mthumb
                            ;-std=gnu++14
                            ;-DUSBCON -DUSBD_USE_CDC
                            ;-DTIM_IRQ_PRIO=13
                            ; end of not used section
                            -I".pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/include"
                            -I".pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/inc"
                            -I"."
                            ;
                            ; beginning of not used section
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
;build_unflags           = -std=gnu++11
                            ; ending of not used section
src_filter              = ${common.default_src_filter}
                            +<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TASKING>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/_htmresc>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc_ride7>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/SW4STM32>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driverr/src/stm32f4xx_rcc.c>
                            -<.pio/Original-disco_f407vg/STM32F4xx_StdPeriph_Lib_V1.8.0_mod/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c>
                            -<Library>
                            +<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
                            -<GPIO_IOToggle>
lib_deps                = STM32F4xx_StdPeriph_Lib_V1.8.0_mod = https://github.com/GadgetAngel/STM32F4xx_StdPeriph_Lib_V1.8.0_mod.git
lib_ignore              = STM32F4xx_StdPeriph_Lib_V1.8.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;for Windows using ST-LINK_cli:
upload_command          = st-link_cli -c ID=0 SWD -P C:\Firmware\Git_Repo\STM32_Template\F4-Backup-bootloader-and-firmware\bootloader-and-firmware.hex
;For Linux using stlink V1.6.0:
;upload_command          = st-flash --format ihex write C:/Firmware/Git_Repo/STM32_Template/F4-Backup-bootloader-and-firmware/bootloader-and-firmware.hex

;Debug setup
;For Linux:
;debug_tool              = stlink
;use the default debug_server

;For Windows ONLY:
debug_tool              = custom
debug_port              = localhost:62230
;openocd -f interface/stlink-v2.cfg -c "reset_config none" -f target/stm32f4x.cfg
debug_server =
  C:\ST\STM32CubeIDE_1.5.1\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_1.5.0.202011040924\tools\bin\ST-LINK_gdbserver.bat

;for Demo
debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
;for GPIO_IOToggle
;debug_init_break        = break main.c:166
;
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  monitor reset
  $LOAD_CMDS
  $INIT_BREAK
#
#
# Discovery board: STM32L433 Nucleo-64 board (Nucleo-L433RC-P)
#
[env:nucleo_l433rc_p]
platform                = ststm32
board                   = nucleo_l433rc_p
framework               = cmsis
board_build.mcu         = stm32l433rc
board_build.f_cpu       = 80000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32L433RC has 256KB FLASH or 262144 or 0x40000,
;
board_build.ldscript    = "STM32xxxxxx_FLASH_MOD.ld"
;
                            ; beginning of not used section
;build_unflags           = -mcpu=cortex-m3
                            ; end of not used section
build_flags             = ${common.build_flags} -DSTM32F100xB -DSTM32F10X_MD_VL -DSTM32_F100RB
                            ; beginning of not used section
                            ;-mcpu=cortex-m4
                            ; end of not used section
                            -I".pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/CMSIS/CMSIS/Device/ST/STM32L4xx/include"
                            -I".pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/inc"
                            -I"."
                            ; beginning of not used section
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
                            ; end of not used section
src_filter              = ${common.default_src_filter}
                            ;
                            ;for Both Linux and Windows
                            +<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/CMSIS/xxxxxxx>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/CMSIS/Device/ST/STM32L4xx>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/_htmresc>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle/stm32f10x_it.c>
                            ;
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Libraries/CMSIS/Device/ST/STM32L4xx/xxxxxxx>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src/xxxxstm32f10x_exti.c>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src/xxxmisc.c>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src/xxxstm32f10x_usart.c>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src/xxxstm32f10x_gpio.c>
                            -<.pio/nucleo_l433rc_p/STM32L4xx_StdPeriph_Lib_V1.16.0_mod/Drivers/STM32L4xx_HAL_Driver/src/xxxstm32f10x_rcc.c>
                            -<Library>
                            ;
                            -<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
                            ;This is GPIO_IOToggle
                            -<GPIO_IOToggle>
                            ;This is GPIOToggle
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle>
lib_deps                = STM32L4xx_StdPeriph_Lib_V1.16.0_mod = https://github.com/GadgetAngel/STM32L4xx_StdPeriph_Lib_V1.16.0_mod.git
lib_ignore              = STM32L4xx_StdPeriph_Lib_V1.16.0_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;for Windows using ST-LINK_cli:
upload_command          = st-link_cli -c ID=0 SWD -P $SOURCE 0x08000000
;For Linux using stlink V1.6.0:
;upload_command          = st-flash write $SOURCE 0x08000000

;Debug setup
;For Linux:
;debug_tool              = stlink
;use the default debug_server

;For Windows ONLY:
debug_tool              = custom
debug_port              = localhost:62230
;openocd -f interface/stlink-v2.cfg -c "reset_config none" -f target/stm32l4x.cfg
debug_server =
  C:\ST\STM32CubeIDE_1.5.1\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_1.5.0.202011040924\tools\bin\ST-LINK_gdbserver.bat

;for Demo
;debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
;for GPIOToggle
debug_init_break        = break main.c:74 if xxxxxxxxx > 40
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  monitor reset
  $LOAD_CMDS
  $INIT_BREAK
#
#
#
# Discovery board: STM32F767 Nucleo-144 Board, (Nucleo-F767ZI)
#
[env:nucleo_f767zi]
platform                = ststm32
board                   = nucleo_f767zi
framework               = cmsis
board_build.mcu         = stm32f767zit6
board_build.f_cpu       = 216000000L
lib_ldf_mode            = off
lib_compat_mode         = off
;This projects link script file (.ld) for STM32F767ZIT6 has 2MB FLASH or 2097152 or 0x200000,
;
board_build.ldscript    = "STM32F700xxX_FLASH_MOD.ld"
                            ; beginning of not used section
;build_unflags           = -mcpu=cortex-m3
                            ; end of not used section
build_flags             = ${common.build_flags} -Dxxxxxx -Dxxxxxx -Dxxxxxxxxx
                            ; beginning of not used section
                            ;-mcpu=cortex-m4
                            ; end of not used section
                            -I".pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/xxxxx"
                            -I".pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/inc"
                            -I"."
                            ; beginning of not used section
                            ;
                            ;for Both Windows and Linux:
                            ; for other modules that might need to be accessed later:
                            ;-I"Library/ff9/src"
                            ; for other modules that might need to be accessed later:
                            ;-I"Library"
                            ; end of not used section
src_filter              = ${common.default_src_filter}
                            ;
                            ;for Both Linux and Windows
                            +<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/CMSIS/Documentation>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/CMSIS/CM3/DeviceSupport/ST/xxxxxx>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/_htmresc>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src>
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle/stm32f10x_it.c>
                            ;
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/CMSIS/CM3/CoreSupport>
                            ; place a "+" (plus) sign in front of next statement to enable the STM32 Std Peripheral Library or place a "-" (minux) sign in front to disable the STM32 Std Peripheral Library
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src/xxxstm32f10x_exti.c>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src/xxxxmisc.c>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src/xxxxstm32f10x_usart.c>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src/xxxstm32f10x_gpio.c>
                            -<.pio/nucleo_f767zi/STM32F7xx_StdPeriph_Lib_Vxxx_mod/Libraries/STM32xxxx_StdPeriph_Driver/src/xxxxstm32f10x_rcc.c>
                            -<Library>
                            ;
                            -<Demo>
                            -<BlinkingLight>
                            -<Blinking_Light2>
                            -<Blinking_Light3>
                            -<Button_Light>
                            ;This is GPIO_IOToggle
                            -<GPIO_IOToggle>
                            ;This is GPIOToggle
                            -<STM32VLDiscovery-board-original-SW/GPIOToggle>
lib_deps                = STM32F7xx_StdPeriph_Lib_Vxxx_mod = https://github.com/GadgetAngel/STM32F7xx_StdPeriph_Lib_Vxxx_mod.git
lib_ignore              = STM32F7xx_StdPeriph_Lib_Vxxx_mod
lib_archive             = no
monitor_speed           = 115200
upload_protocol         = custom

;for Windows using ST-LINK_cli:
upload_command          = st-link_cli -c ID=0 SWD -P $SOURCE 0x08000000
;For Linux using stlink V1.6.0:
;upload_command          = st-flash write $SOURCE 0x08000000

;Debug setup
;For Linux:
;debug_tool              = stlink
;use the default debug_server

;For Windows ONLY:
debug_tool              = custom
debug_port              = localhost:62230
;openocd -f interface/stlink-v2.cfg -c "reset_config none" -f target/stm32f7x.cfg
debug_server =
  C:\ST\STM32CubeIDE_1.5.1\STM32CubeIDE\plugins\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_1.5.0.202011040924\tools\bin\ST-LINK_gdbserver.bat

;for Demo
;debug_init_break        = break inc if i > 40
;for BlinkingLight
;debug_init_break        = break inc if n > 40
;for Blinking_Light2
;debug_init_break        = break inc if ledval > 40
;for Blinking_Light3
;debug_init_break        = break inc if ledval > 40
;for Button_Light
;debug_init_break        = break main.c:74 if button_value = 1
;for GPIOToggle
debug_init_break        = break main.c:xxxxx if xxxxxxx > 40
debug_load_mode         = always
debug_load_cmds         = preload
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  monitor reset
  $LOAD_CMDS
  $INIT_BREAK

